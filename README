I've written several utility scripts for Unix/Linux over the last decades. But these
are a few of the ones I use often and have stood the test of time.

Over the last several years, I've used these tools repeatedly, first at home with my 
pet projects, later at SRI International, then at 33Across, my startup Infrinity, and 
now at GetJar, which bought Infrinity.

Together, these programs have saved me countless hours in sifting through 
mountains of data for ad-hoc processing tasks. They have helped me do that in a fraction
of the time it would have taken for someone to craft map-reduce or hadoop jobs to do 
the same things.

Although I am totally at home at the Unix command line, the conspicuous absence, 
by default, of commands with these functionalities has always bugged me. I hope you find 
these as useful as I have. 

There are no Man pages - simply invoke these commands with a -h option and they will 
print usage.

& 

$ colsort -h
colsort is strictly a filter. It sorts whitespace separated columns in alphabetical order.
 Use it to ensure consistent ordering of data in a pipeline to match downstream regexes.
 e.g. cat access_log | sed 's/&/ /g' | grep -i 'param1.*param2'
 You need this because User-Agents are notorious for haphazard param orderings.


$ uniqify -h
Uniqify: Print only first occurrence of each line regardless of input sort order, unlike uniq(1).

   Advantages over sort -u:
    (1) Immediate output (2) Upto 2x faster (3) Typically, much smaller mem profile
   Cons & Caveats:
    (1) Uniqueness is upto MD5 of input (2) Output is unsorted (3) No count mode

   Usage: cat infile.txt | uniqify [-f NUM] >outfile.txt
     -f NUM uniqifies on field NUM only (not entire line)

   Notes: uniqify is designed along the lines of a Bloom filter (http://en.wikipedia.org/wiki/Bloom_filter)
   and so there is a teeeeny chance of false-positives in tagging dupes.


$ linecount -h
Usage: linecount [-q] -tag STR -progress N
  Simply pass lines through with same line progress every N lines
  and a STR-tagged checkpoint every 10*N lines.
  Use -q to eat input (strictly quiet counting mode)
  For example try: seq 10000000 | linecount -tag Me -p 100000 >/dev/null
  or equivalently: seq 10000000 | linecount -tag Me -q -p 100000
